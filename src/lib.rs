#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

/* automatically generated by rust-bindgen */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const LIBMOSQUITTO_MAJOR: u32 = 1;
pub const LIBMOSQUITTO_MINOR: u32 = 4;
pub const LIBMOSQUITTO_REVISION: u32 = 14;
pub const LIBMOSQUITTO_VERSION_NUMBER: u32 = 1004014;
pub const MOSQ_LOG_NONE: u32 = 0;
pub const MOSQ_LOG_INFO: u32 = 1;
pub const MOSQ_LOG_NOTICE: u32 = 2;
pub const MOSQ_LOG_WARNING: u32 = 4;
pub const MOSQ_LOG_ERR: u32 = 8;
pub const MOSQ_LOG_DEBUG: u32 = 16;
pub const MOSQ_LOG_SUBSCRIBE: u32 = 32;
pub const MOSQ_LOG_UNSUBSCRIBE: u32 = 64;
pub const MOSQ_LOG_WEBSOCKETS: u32 = 128;
pub const MOSQ_LOG_ALL: u32 = 65535;
pub const MOSQ_MQTT_ID_MAX_LENGTH: u32 = 23;
pub const MQTT_PROTOCOL_V31: u32 = 3;
pub const MQTT_PROTOCOL_V311: u32 = 4;
pub const mosq_err_t_MOSQ_ERR_CONN_PENDING: mosq_err_t = -1;
pub const mosq_err_t_MOSQ_ERR_SUCCESS: mosq_err_t = 0;
pub const mosq_err_t_MOSQ_ERR_NOMEM: mosq_err_t = 1;
pub const mosq_err_t_MOSQ_ERR_PROTOCOL: mosq_err_t = 2;
pub const mosq_err_t_MOSQ_ERR_INVAL: mosq_err_t = 3;
pub const mosq_err_t_MOSQ_ERR_NO_CONN: mosq_err_t = 4;
pub const mosq_err_t_MOSQ_ERR_CONN_REFUSED: mosq_err_t = 5;
pub const mosq_err_t_MOSQ_ERR_NOT_FOUND: mosq_err_t = 6;
pub const mosq_err_t_MOSQ_ERR_CONN_LOST: mosq_err_t = 7;
pub const mosq_err_t_MOSQ_ERR_TLS: mosq_err_t = 8;
pub const mosq_err_t_MOSQ_ERR_PAYLOAD_SIZE: mosq_err_t = 9;
pub const mosq_err_t_MOSQ_ERR_NOT_SUPPORTED: mosq_err_t = 10;
pub const mosq_err_t_MOSQ_ERR_AUTH: mosq_err_t = 11;
pub const mosq_err_t_MOSQ_ERR_ACL_DENIED: mosq_err_t = 12;
pub const mosq_err_t_MOSQ_ERR_UNKNOWN: mosq_err_t = 13;
pub const mosq_err_t_MOSQ_ERR_ERRNO: mosq_err_t = 14;
pub const mosq_err_t_MOSQ_ERR_EAI: mosq_err_t = 15;
pub const mosq_err_t_MOSQ_ERR_PROXY: mosq_err_t = 16;
pub type mosq_err_t = i32;
pub const mosq_opt_t_MOSQ_OPT_PROTOCOL_VERSION: mosq_opt_t = 1;
pub type mosq_opt_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mosquitto_message {
    pub mid: ::std::os::raw::c_int,
    pub topic: *mut ::std::os::raw::c_char,
    pub payload: *mut ::std::os::raw::c_void,
    pub payloadlen: ::std::os::raw::c_int,
    pub qos: ::std::os::raw::c_int,
    pub retain: bool,
}
#[test]
fn bindgen_test_layout_mosquitto_message() {
    assert_eq!(
        ::std::mem::size_of::<mosquitto_message>(),
        24usize,
        concat!("Size of: ", stringify!(mosquitto_message))
    );
    assert_eq!(
        ::std::mem::align_of::<mosquitto_message>(),
        4usize,
        concat!("Alignment of ", stringify!(mosquitto_message))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mosquitto_message>())).mid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mosquitto_message),
            "::",
            stringify!(mid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mosquitto_message>())).topic as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(mosquitto_message),
            "::",
            stringify!(topic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mosquitto_message>())).payload as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mosquitto_message),
            "::",
            stringify!(payload)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mosquitto_message>())).payloadlen as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(mosquitto_message),
            "::",
            stringify!(payloadlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mosquitto_message>())).qos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mosquitto_message),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mosquitto_message>())).retain as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mosquitto_message),
            "::",
            stringify!(retain)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mosquitto {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Important note"]
    #[doc = ""]
    #[doc = " The following functions that deal with network operations will return"]
    #[doc = " MOSQ_ERR_SUCCESS on success, but this does not mean that the operation has"]
    #[doc = " taken place. An attempt will be made to write the network data, but if the"]
    #[doc = " socket is not available for writing at that time then the packet will not be"]
    #[doc = " sent. To ensure the packet is sent, call mosquitto_loop() (which must also"]
    #[doc = " be called to process incoming network data)."]
    #[doc = " This is especially important when disconnecting a client that has a will. If"]
    #[doc = " the broker does not receive the DISCONNECT command, it will assume that the"]
    #[doc = " client has disconnected unexpectedly and send the will."]
    #[doc = ""]
    #[doc = " mosquitto_connect()"]
    #[doc = " mosquitto_disconnect()"]
    #[doc = " mosquitto_subscribe()"]
    #[doc = " mosquitto_unsubscribe()"]
    #[doc = " mosquitto_publish()"]
    pub fn mosquitto_lib_version(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        revision: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_lib_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_lib_cleanup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_new(
        id: *const ::std::os::raw::c_char,
        clean_session: bool,
        obj: *mut ::std::os::raw::c_void,
    ) -> *mut mosquitto;
}
extern "C" {
    pub fn mosquitto_destroy(mosq: *mut mosquitto);
}
extern "C" {
    pub fn mosquitto_reinitialise(
        mosq: *mut mosquitto,
        id: *const ::std::os::raw::c_char,
        clean_session: bool,
        obj: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_will_set(
        mosq: *mut mosquitto,
        topic: *const ::std::os::raw::c_char,
        payloadlen: ::std::os::raw::c_int,
        payload: *const ::std::os::raw::c_void,
        qos: ::std::os::raw::c_int,
        retain: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_will_clear(mosq: *mut mosquitto) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_username_pw_set(
        mosq: *mut mosquitto,
        username: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_connect(
        mosq: *mut mosquitto,
        host: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        keepalive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_connect_bind(
        mosq: *mut mosquitto,
        host: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        keepalive: ::std::os::raw::c_int,
        bind_address: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_connect_async(
        mosq: *mut mosquitto,
        host: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        keepalive: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_connect_bind_async(
        mosq: *mut mosquitto,
        host: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        keepalive: ::std::os::raw::c_int,
        bind_address: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_connect_srv(
        mosq: *mut mosquitto,
        host: *const ::std::os::raw::c_char,
        keepalive: ::std::os::raw::c_int,
        bind_address: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_reconnect(mosq: *mut mosquitto) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_reconnect_async(mosq: *mut mosquitto) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_disconnect(mosq: *mut mosquitto) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_publish(
        mosq: *mut mosquitto,
        mid: *mut ::std::os::raw::c_int,
        topic: *const ::std::os::raw::c_char,
        payloadlen: ::std::os::raw::c_int,
        payload: *const ::std::os::raw::c_void,
        qos: ::std::os::raw::c_int,
        retain: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_subscribe(
        mosq: *mut mosquitto,
        mid: *mut ::std::os::raw::c_int,
        sub: *const ::std::os::raw::c_char,
        qos: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_unsubscribe(
        mosq: *mut mosquitto,
        mid: *mut ::std::os::raw::c_int,
        sub: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_message_copy(
        dst: *mut mosquitto_message,
        src: *const mosquitto_message,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_message_free(message: *mut *mut mosquitto_message);
}
extern "C" {
    pub fn mosquitto_loop(
        mosq: *mut mosquitto,
        timeout: ::std::os::raw::c_int,
        max_packets: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_loop_forever(
        mosq: *mut mosquitto,
        timeout: ::std::os::raw::c_int,
        max_packets: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_loop_start(mosq: *mut mosquitto) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_loop_stop(mosq: *mut mosquitto, force: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_socket(mosq: *mut mosquitto) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_loop_read(
        mosq: *mut mosquitto,
        max_packets: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_loop_write(
        mosq: *mut mosquitto,
        max_packets: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_loop_misc(mosq: *mut mosquitto) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_want_write(mosq: *mut mosquitto) -> bool;
}
extern "C" {
    pub fn mosquitto_threaded_set(mosq: *mut mosquitto, threaded: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_opts_set(
        mosq: *mut mosquitto,
        option: mosq_opt_t,
        value: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_tls_set(
        mosq: *mut mosquitto,
        cafile: *const ::std::os::raw::c_char,
        capath: *const ::std::os::raw::c_char,
        certfile: *const ::std::os::raw::c_char,
        keyfile: *const ::std::os::raw::c_char,
        pw_callback: ::std::option::Option<
            unsafe extern "C" fn(
                buf: *mut ::std::os::raw::c_char,
                size: ::std::os::raw::c_int,
                rwflag: ::std::os::raw::c_int,
                userdata: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_tls_insecure_set(mosq: *mut mosquitto, value: bool) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_tls_opts_set(
        mosq: *mut mosquitto,
        cert_reqs: ::std::os::raw::c_int,
        tls_version: *const ::std::os::raw::c_char,
        ciphers: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_tls_psk_set(
        mosq: *mut mosquitto,
        psk: *const ::std::os::raw::c_char,
        identity: *const ::std::os::raw::c_char,
        ciphers: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_connect_callback_set(
        mosq: *mut mosquitto,
        on_connect: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mosquitto,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn mosquitto_disconnect_callback_set(
        mosq: *mut mosquitto,
        on_disconnect: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mosquitto,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn mosquitto_publish_callback_set(
        mosq: *mut mosquitto,
        on_publish: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mosquitto,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn mosquitto_message_callback_set(
        mosq: *mut mosquitto,
        on_message: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mosquitto,
                arg2: *mut ::std::os::raw::c_void,
                arg3: *const mosquitto_message,
            ),
        >,
    );
}
extern "C" {
    pub fn mosquitto_subscribe_callback_set(
        mosq: *mut mosquitto,
        on_subscribe: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mosquitto,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
                arg4: ::std::os::raw::c_int,
                arg5: *const ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn mosquitto_unsubscribe_callback_set(
        mosq: *mut mosquitto,
        on_unsubscribe: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mosquitto,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn mosquitto_log_callback_set(
        mosq: *mut mosquitto,
        on_log: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut mosquitto,
                arg2: *mut ::std::os::raw::c_void,
                arg3: ::std::os::raw::c_int,
                arg4: *const ::std::os::raw::c_char,
            ),
        >,
    );
}
extern "C" {
    pub fn mosquitto_reconnect_delay_set(
        mosq: *mut mosquitto,
        reconnect_delay: ::std::os::raw::c_uint,
        reconnect_delay_max: ::std::os::raw::c_uint,
        reconnect_exponential_backoff: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_max_inflight_messages_set(
        mosq: *mut mosquitto,
        max_inflight_messages: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_message_retry_set(mosq: *mut mosquitto, message_retry: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn mosquitto_user_data_set(mosq: *mut mosquitto, obj: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mosquitto_socks5_set(
        mosq: *mut mosquitto,
        host: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        username: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_strerror(mosq_errno: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mosquitto_connack_string(
        connack_code: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mosquitto_sub_topic_tokenise(
        subtopic: *const ::std::os::raw::c_char,
        topics: *mut *mut *mut ::std::os::raw::c_char,
        count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_sub_topic_tokens_free(
        topics: *mut *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_topic_matches_sub(
        sub: *const ::std::os::raw::c_char,
        topic: *const ::std::os::raw::c_char,
        result: *mut bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_pub_topic_check(topic: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mosquitto_sub_topic_check(topic: *const ::std::os::raw::c_char)
        -> ::std::os::raw::c_int;
}
